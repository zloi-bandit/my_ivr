

[my-ivr]

; В ARG1 передается номер первоначального меню. 
; 
; Переменная ${LOCATION} содержит данные, необходимые для выбора местоположения в диалплане. Вначале ей присваивается номер первого меню
; затем, по мере выполнения диалплана, в ней оказываются номера соответствующих местоположений

exten => s,1,Set(NEXT_LOCATION=${ARG1})


; Когда переменные равны, выполняются действия для данного местоположения. 
; Если переменные становятся не равны, выполняется переход к следующему пункту меню (см. далее процедуру сравнения)

exten => s,n(next_location),Set(LOCATION=${NEXT_LOCATION})


; При попадании в конкретный пункт меню (в том числе в само меню) может быть выполнена цепочка действий. 
; В переменной ${ACTION_PRIORITY} указан номер действия для этого пункта меню.

exten => s,n,Set(ACTION_PRIORITY=1) 


; Читаем из БД, какое действие нам следует выполнять, а также аргумент функции

exten => s,n(next_action),Set(GET_ACTION_RESULTS=${ODBC_GET_ACTION(${LOCATION},${ACTION_PRIORITY})})

exten => s,n,GotoIf($[!$["${GET_ACTION_RESULTS}"=""]]?split_results)
exten => s,n,GotoIf($[${NEXT_LOCATION}!=${LOCATION}]?next_location)
exten => s,n,Goto(h,1)

; Разделяем полученную информацию на две разные переменные:

exten => s,n(split_results),Set(GET_ACTION_RESULTS_ACTION=${CUT(GET_ACTION_RESULTS,\,,1)})
exten => s,n,Set(GET_ACTION_RESULTS_ARG=${CUT(GET_ACTION_RESULTS,\,,2)})


; Обрабатываем действия. Следующие действия обрабатываются самим Asterisk (номер соответствует значению, полученному из GET_ACTION_RESULTS_ACTION):
; 1: Проиграть сообщение и ждать ввода цифр - переход на метку background;
; 2: Просто проиграть сообщение - идем на метку playback;
; 3: Не проигрывать сообщение и ждать ввода цифр - метка waitexten;
; 4: Вызов абонента - идем на метку dial;
; 5: Завершение звонка - метка terminate;
; 6: Переход в другой IVR - метка goto_ivr.

exten => s,n,GotoIf($[${GET_ACTION_RESULTS_ACTION}=1]?background)
exten => s,n,GotoIf($[${GET_ACTION_RESULTS_ACTION}=2]?terminate)
exten => s,n,GotoIf($[${GET_ACTION_RESULTS_ACTION}=3]?playback)
exten => s,n,GotoIf($[${GET_ACTION_RESULTS_ACTION}=4]?dial)
exten => s,n,GotoIf($[${GET_ACTION_RESULTS_ACTION}=5]?waitexten)
exten => s,n,GotoIf($[${GET_ACTION_RESULTS_ACTION}=6]?goto_ivr)


; Во всех остальных случаях генерируется событие для Node.js, которому передается номер действия и аргумент.
; На базе данного решения можно реализовывать более сложные функции (проверка баланса и т.п.)
 
exten => s,n,Goto(js_functions)

; Проигрыш меню с одновременным чтением DTMF 
exten => s,n(background),Set(SOUND_FILENAME=${CUT(GET_ACTION_RESULTS_ARG,\;,1)}

; Следующая строчка для того, чтобы в WaitExten можно было передавать время ожидания как напрямую, так и проходя через Background
exten => s,n,Set(GET_ACTION_RESULTS_ARG=${CUT(GET_ACTION_RESULTS_ARG,\;,2)}						

exten => s,n,Background(${SOUND_FILENAME},s)				

; За проигрышем мелодии ожидаем указанный промежуток времени
exten => s,n(waitexten),WaitExten(${GET_ACTION_RESULTS_ARG})

; Клиент не набрал цифр - отправляем его в специальное направление "u"
exten => s,n,Set(NEXT_IVR_PATH=${ODBC_GET_NEXT_IVR(${LOCATION}_u)})              

exten => s,n,Goto(set_action_priority_s)


; Воспроизведение звукового файла
exten => s,n(playback),Playback(${GET_ACTION_RESULTS_ARG})
exten => s,n,Goto(set_action_priority_s) 


; Набор номера
exten => s,n(dial),Set(DIAL_DIRECTION=${CUT(GET_ACTION_RESULTS_ARG,\;,1)}
exten => s,n,Set(DIAL_TIMEOUT=${CUT(GET_ACTION_RESULTS_ARG,\;,2)}
exten => s,n,Set(DIAL_OPTIONS=${CUT(GET_ACTION_RESULTS_ARG,\;,3)}
exten => s,n,Goto(set_action_priority_s)


; Терминация звонка
exten => s,n(terminate),Goto(h,1)


; Переход к другому меню
exten => s,n(goto_ivr),Set(NEXT_LOCATION=${GET_ACTION_RESULTS_ARG})
exten => s,n,Goto(set_action_priority_s)


; Дополнительные функции
exten => s,n(js_functions),Stasis(invoke_js_function,${GET_ACTION_RESULTS_ACTION},${GET_ACTION_RESULTS_ARGS})


; Переход к следующему действию
exten => s,n(set_action_priority_s),Set(ACTION_PRIORITY=$[${ACTION_PRIORITY}+1])
exten => s,n,Goto(next_action)


; Донабор цифр
exten => _X!,1,Set(NEXT_LOCATION=${ODBC_GET_NEXT_IVR(${LOCATION},${EXTEN})})
exten => _X!,n,GotoIf($[${NEXT_LOCATION}!=""]?set_action_priority_x)


; Клиент набрал некорректные цифры - отправляем его в специальное направление "i"
exten => _X!,n,Set(NEXT_LOCATION=${ODBC_GET_NEXT_IVR(${LOCATION}_i)})


; На случай, если после приёма цифр предусмотрены дополнительные действия
exten => _X!,n(set_action_priority_x),Set(ACTION_PRIORITY=$[${ACTION_PRIORITY}+1])
exten => _X!,n,Goto(s,next_action)


exten => h,1,Hangup()



